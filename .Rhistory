print(a)
}
Filter(function(x) is(x, "data.frame"), mget(ls()))
Filter(function(x) is(x, "data.frame"), mget(ls())) %>%
do.call(rbind, .)
dfs <- Filter(function(x) is(x, "data.frame"), mget(ls())) %>%
do.call(bind_rows, .)
dfs
temp[c(1, 2, 5:8)]
colnames(i) %>% print()
for(i in temp[c(1, 2, 5:8)]){
colnames(i) %>% print()
}
colnames(temp[1])
colnames(iris1)
colnames(ls())
ls(2)
ls()
ls(pattern="iris*")
colnames(ls(pattern="iris*")[1])
colnames(ls(pattern="iris*")[4])
ls(pattern="iris*")
ls(pattern="iris*")[4]
ls(pattern="iris*")[4] %>%
colnames()
iris1%>%
colnames()
for(i in ls(pattern="iris*")
ls(pattern="iris*")
for(i in ls(pattern="iris*")) {
a <- colnames(i)
print(a)
}
ls(pattern="iris*")[4]
for(i in c(1, 2, 5:8)) {
a <- ls(pattern="iris*")[i]
names(a)
}
for(i in c(1, 2, 5:8)) {
a <- ls(pattern="iris*")[i]
b <- names(a)
print(b)
}
b
ls(pattern="iris*")[1] %>% pull
ls(pattern="iris*")[1] %>% c()
a <- ls(pattern="iris*")[1] %>% c()
a
for(i in c(1, 2, 5:8)) {
a <- ls(pattern="iris*")[i] %>% c()
b <- names(a)
print(b)
}
for(i in c(1, 2, 5:8)) {
a <- ls(pattern="iris*")[i] %>% c()
b <- colnames(a)
print(b)
}
iris1 %>%
colnames()
dfs
Filter(function(x) is(x, "data.frame"), mget(ls()))
#
Filter(function(x) is(x, "data.frame"), mget(ls())) # %>% do.call(bind_rows, .)
#
dfs <- Filter(function(x) is(x, "data.frame"), mget(ls())) # %>% do.call(bind_rows, .)
dfs[1]
dfs[[1]]
rm(dfs)
#
dfs <- Filter(function(x) is(x, "data.frame"), mget(ls())) # %>% do.call(bind_rows, .)
dfs$iris1
dfs$iris1 %>% names()
for(i in ls(pattern = "iris*")){
dfs$i %>% names() %>% print()
}
dfs$i %>% colnames() %>% print()
for(i in ls(pattern = "iris*")){
dfs$i %>% colnames() %>% print()
}
ls(pattern = "iris*")
paste0("iris", seq(5:8))
paste0("iris", seq(5, 8, 1))
for(i in paste0("iris", seq(5, 8, 1))){
dfs$i %>% colnames() %>% print()
}
lapply(dflist, function(df) {
x2 <- df$x^2
log_y <- log(df$y)
plot(x,y)
NULL
})
dflist <- ls(pattern = "iris*")
dflist
lapply(dflist, function(df) {
x2 <- df$x^2
log_y <- log(df$y)
plot(x,y)
NULL
})
dfs$iris1 %>% names()
dfs$iris1  %>% names()
iris1_n <- dfs$iris1  %>% names() %>% tolower()
iris1_n
dfs$iris1 <- names(iris1_n)
dfs$iris1
dfs$iris1
#
dfs <- Filter(function(x) is(x, "data.frame"), mget(ls())) # %>% do.call(bind_rows, .)
dfs$iris1
names(iris1_n)
iris1_n
paste0("iris", seq(5, 8, 1))
for (i in seq_along(paste0("iris", seq(5, 8, 1)))){
colnames(dflist[[i]])
}
for (i in seq_along(paste0("iris", seq(5, 8, 1)))){
colnames(dflist[[i]]) %>% print()
}
for (i in seq_along(paste0("iris", seq(5, 8, 1)))){
colnames(dfs[[i]]) %>% print()
}
c(1, 2, 5:8)
for (i in seq_along(paste0("iris", c(1, 2, 5:8)))){
colnames(dfs[[i]]) %>% print()
}
for (i in seq_along(paste0("iris", c(1, 2, 5:8)))){
colnames(dfs[[i]]) %>% list() %>% print()
}
for(i in paste0("iris", seq(5, 8, 1))){
dfs$i %>% colnames() %>% print()
}
iris1_n
for (i in seq_along(paste0("iris", c(1, 2, 5:8)))){
colnames(dfs[[i]]) %>%
list() %>%
print()
}
dfs
head(dfs)
summary(dfs)
str(dfs)
# checar arquivos
mydir <- "output/atividade1/"
temp <- list.files(pattern="*.csv", path = mydir)
read_csv(paste0(mydir, temp[1])) # 3 e 4 nao leem
temp
temp
#
temp %>%
map_dfr(read_csv)
temp
#
temp %>%
paste0(mydir)
#
temp %>%
paste0(mydir, .)
#
temp %>%
paste0(mydir, .) %>%
map_dfr(read_csv)
#
temp %>%
paste0(mydir, .) %>%
map_dfr(read_csv, sep = ";")
#
temp %>%
paste0(mydir, .) %>%
map_dfr(read.csv, sep = ";")
#
temp %>%
paste0(mydir, .) %>%
map_dfr(read.csv, sep = ";", header = FALSE)
# loop
for(i in c(1, 2, 5:8)) {     # Head of for-loop
assign(paste0("iris", i),  # Read and store data frames
read.csv2(paste0(mydir,
temp[i]), sep = ";", dec = ",")
)
}
iris2
#
iris2 %>%
slice(1:15)
# loop
for(i in c(1, 2, 5:8)) {     # Head of for-loop
assign(paste0("iris", i),  # Read and store data frames
read.csv2(paste0(mydir,
temp[i]), sep = ";")
)
}
#
iris2 %>%
slice(1:15)
# loop
for(i in c(1, 2, 5:8)) {     # Head of for-loop
assign(paste0("iris", i),  # Read and store data frames
read_csv(paste0(mydir,
temp[i]), sep = ";")
)
}
# loop
for(i in c(1, 2, 5:8)) {     # Head of for-loop
assign(paste0("iris", i),  # Read and store data frames
read.csv(paste0(mydir,
temp[i]), sep = ";")
)
}
#
iris2 %>%
slice(1:15)
# loop
for(i in c(1, 2, 5:8)) {     # Head of for-loop
assign(paste0("iris", i),  # Read and store data frames
read.csv(paste0(mydir,
temp[i]), sep = ";", dec = ".")
)
}
#
iris2 %>%
slice(1:15)
library(tidyverse)
library(rgbif)
?rgbif
# checar funcoes do pacote
?occ_data
# baixar ocorrencias
dori_gbif <- occ_data(scientificName = "Paracanthurus hepatus",
hasCoordinate = TRUE,
hasGeospatialIssue = FALSE)
dim(dori_gbif$data)
dori_gbif
# checar campos
dori_gbif$data %>% names
# checar issues
gbif_issues()
dori_gbif$data$issues
# checar problemas reportados
issues_gbif <- dori_gbif$data$issues %>%
unique() %>%
strsplit(., "[,]") %>%
unlist()
issues_gbif
# checar problemas reportados
issues_gbif <- dori_gbif$data$issues %>%
# unique() %>%
strsplit(., "[,]") %>%
unlist() %>%
unique()
issues_gbif
gbif_issues()
# ver quais os problemas encontrados no dataset baixado
gbif_issues() %>% head
# ver quais os problemas encontrados no dataset baixado
gbif_issues() %>%
data.frame() %>%
filter(code %in% issues_gbif)
# selecionar campos de interesse
dori_gbif1 <- dori_gbif$data %>%
dplyr::select(scientificName, acceptedScientificName, decimalLatitude, decimalLongitude,
issues, waterBody, basisOfRecord, occurrenceStatus, rightsHolder,
datasetName, recordedBy, depth, locality, habitat)
# ocorrencias únicas
dori_gbif1 <- dori_gbif1 %>%
distinct()
# checar niveis dos fatores
lapply(dori_gbif1, unique)
# investigar niveis suspeitos
dori_gbif1 %>%
distinct(waterBody) %>%
pull()
# ver quais os problemas encontrados no dataset baixado
gbif_issues() %>%
data.frame() %>%
filter(code %in% issues_gbif)
# waterBody
dori_gbif1 %>%
group_by(waterBody) %>%
summarise(occ = length(scientificName)) %>%
ggplot(aes(occ, y=waterBody)) +
geom_bar(stat = 'identity')
# investigar niveis suspeitos
dori_gbif1 %>%
distinct(waterBody) %>%
pull()
# waterBody
dori_gbif1 %>%
group_by(waterBody) %>%
summarise(occ = length(scientificName)) %>%
ggplot(aes(occ, y=waterBody)) +
geom_bar(stat = 'identity')
# fonte das regioes erradas
dori_gbif1 %>%
filter(waterBody %in% c("Atlantic Ocean", "Carribean", "Royal Caribbean", "Carribean Sea", "Bonaire")) %>%
distinct(datasetName)
# 25 ocorrencias
dori_gbif1 %>%
filter(datasetName %in% c("Diveboard - Scuba diving citizen science"))
# filtrar todas do dataset suspeito
dori_gbif_ok <- dori_gbif1 %>%
filter(!datasetName %in% c("Diveboard - Scuba diving citizen science"))
library(ggmap)
library(maps)
library(mapdata)
world <- map_data('world')
# checar pontos
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = dori_gbif_ok, aes(x = decimalLongitude, y = decimalLatitude), color = "red") +
labs(x = "longitude", y = "latitude", title = expression(italic("Paracanthurus hepatus")))
# checar pontos
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = dori_gbif1, aes(x = decimalLongitude, y = decimalLatitude), color = "red") +
labs(x = "longitude", y = "latitude", title = expression(italic("Paracanthurus hepatus")))
# checar profundidade
dori_gbif_ok %>%
ggplot(aes(x = depth, fill = waterBody)) +
geom_histogram()
#####################################################
### extrair dados do OBIS
library(robis)
# baixar ocorrências
dori_obis <- robis::occurrence("Paracanthurus hepatus")
dori_obis1 <- dori_obis %>%
dplyr::select(scientificName, decimalLatitude, decimalLongitude, bathymetry,
flags, waterBody, basisOfRecord, occurrenceStatus, rightsHolder,
datasetName, recordedBy, depth, locality, habitat) %>%
distinct()
# check problemas reportados (flags)
dori_obis1 %>%
distinct(flags)
# check NA em datasetName
dori_obis1 %>%
filter(!flags %in% c("no_depth,on_land", "on_land", "on_land,depth_exceeds_bath", "depth_exceeds_bath,on_land"),
is.na(datasetName)) %>%
distinct(waterBody)
# depth ok
dori_obis1 %>%
filter(!flags %in% c("no_depth,on_land", "on_land", "on_land,depth_exceeds_bath", "depth_exceeds_bath,on_land"),
!is.na(datasetName),
!waterBody %in% c("North America", "North America Atlantic", "atlantique")) %>%
ggplot(aes(x = depth, fill = waterBody)) +
geom_histogram()
# checar niveis
dori_obis1 %>%
filter(!flags %in% c("no_depth,on_land", "on_land", "on_land,depth_exceeds_bath", "depth_exceeds_bath,on_land"),
!is.na(datasetName),
!waterBody %in% c("North America", "North America Atlantic", "atlantique")) %>%
lapply(., unique)
#
dori_obis_ok <- dori_obis1 %>%
filter(!flags %in% c("no_depth,on_land", "on_land", "on_land,depth_exceeds_bath", "depth_exceeds_bath,on_land"),
!is.na(datasetName),
!waterBody %in% c("North America", "North America Atlantic", "atlantique", NA))
# plotar mapa
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = dori_obis_ok, aes(x = decimalLongitude, y = decimalLatitude, color = waterBody)) +
#theme(legend.title = element_blank()) +
labs(x = "longitude", y = "latitude", title = expression(italic("Paracanthurus hepatus")))
source('functions/aux_functions.R')
View(flag_outlier)
# classificar ocorrências
marcados <- dori_gbif$data %>%
data.frame() %>%
dplyr::select(scientificName, decimalLongitude, decimalLatitude, datasetName) %>%
distinct() %>%
flag_outlier(., "Paracanthurus hepatus (Linnaeus, 1766)")
head(marcados)
# mapa
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = marcados,
aes(x = decimalLongitude, y = decimalLatitude,
color = flag)) +
theme(legend.title = element_blank()) +
labs(x = "longitude", y = "latitude",
title = expression(italic("Paracanthurus hepatus")))
library(scrubr)
# mapa
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = data_scrubr,
aes(x = decimalLongitude, y = decimalLatitude),
color = "red") +
geom_point(data = marcados %>%
filter(flag != "OK"),
aes(x = decimalLongitude, y = decimalLatitude),
color = "blue", shape = 3) +
theme(legend.title = element_blank()) +
labs(x = "longitude", y = "latitude",
title = expression(italic("Paracanthurus hepatus")))
# usando os dados com flag
data_scrubr <- marcados %>%
dframe() %>%
coord_impossible() %>%
coord_incomplete() %>%
coord_unlikely() %>%
dedup()
# mapa
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = data_scrubr,
aes(x = decimalLongitude, y = decimalLatitude),
color = "red") +
geom_point(data = marcados %>%
filter(flag != "OK"),
aes(x = decimalLongitude, y = decimalLatitude),
color = "blue", shape = 3) +
theme(legend.title = element_blank()) +
labs(x = "longitude", y = "latitude",
title = expression(italic("Paracanthurus hepatus")))
library(obistools)
dori_obis %>%
dplyr::select(decimalLongitude, decimalLatitude, scientificNameID) %>%
distinct() %>%
check_outliers_species(., report=TRUE)
library(CoordinateCleaner)
flags <-
clean_coordinates(
x = marcados,
lon = "decimalLongitude",
lat = "decimalLatitude",
species = "scientificName",
tests = c("equal", "gbif",
"zeros", "seas")
)
rm(list = setdiff(ls(), c("dori_obis_ok", "dori_gbif_ok")))
# ver diferencas
setdiff(names(dori_gbif_ok), names(dori_obis_ok))
setdiff(names(dori_obis_ok), names(dori_gbif_ok))
all_data <- bind_rows(dori_gbif_ok %>%
mutate(repo = paste0("gbif", row.names(.))),
dori_obis_ok %>%
mutate(repo = paste0("obis", row.names(.)))) %>%
column_to_rownames("repo") %>%
dplyr::select(decimalLongitude, decimalLatitude, depth) %>%
distinct() %>%
rownames_to_column("occ") %>%
separate(col = "occ", into = c("datasetName", "rn"), sep = 4) %>%
mutate(scientificName = "Paracanthurus hepatus") %>%
dplyr::select(-rn)
# mapear ocorrencias
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = all_data, aes(x = decimalLongitude, y = decimalLatitude, color = datasetName)) +
#theme(legend.title = element_blank()) +
labs(x = "longitude", y = "latitude", title = expression(italic("Paracanthurus hepatus")))
world <- map_data('world')
# mapear ocorrencias
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = all_data, aes(x = decimalLongitude, y = decimalLatitude, color = datasetName)) +
#theme(legend.title = element_blank()) +
labs(x = "longitude", y = "latitude", title = expression(italic("Paracanthurus hepatus")))
mydir <- "output/atividade1/"
mydir
list.files(pattern = "*.csv", path = mydir)
temp <- list.files(pattern = "*.csv", path = mydir)
temp
read_csv(paste0(mydir, temp[1])) # 3 e 4 nao leem
read_csv(paste0(mydir, temp[2])) # 3 e 4 nao leem
read_csv(paste0(mydir, temp[3])) # 3 e 4 nao leem
read_csv(paste0(mydir, temp[4])) # 3 e 4 nao leem
read_csv(paste0(mydir, temp[5])) # 3 e 4 nao leem
# loop
for(i in c(1, 2, 5:8)) {     # Head of for-loop
assign(paste0("iris", i),  # Read and store data frames
read.csv(paste0(mydir,
temp[i]), sep = ";", dec = ".")
)
}
View(iris1)
View(iris2)
iris2
#
iris2 %>%
slice(1:15)
#
iris2a <- iris2 %>%
slice(1:15)
names(iris2a)
iris2a %>%
rename(SPECIE = spp)
iris2a %>%
rename(spp = SPECIE)
iris2a %>%
rename(spp = SPECIE,
id1 = ID_1)
iris3 <- read.table("~/github/ciencia_colab/output/atividade1/atividade1_GABRIEL-DEPIANTTI.csv", sep=";", quote="\"")
View(iris3)
# Sorteio de 3 = (1) apresentar, 2 e 3 (debater)
c("Vanessa", "Pedro", "Gabriel", "Nilson") %>%
sample(3)
