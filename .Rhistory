temp %>%
paste0(mydir, .) %>%
map_dfr(read_csv)
#
temp %>%
paste0(mydir, .) %>%
map_dfr(read_csv, sep = ";")
#
temp %>%
paste0(mydir, .) %>%
map_dfr(read.csv, sep = ";")
#
temp %>%
paste0(mydir, .) %>%
map_dfr(read.csv, sep = ";", header = FALSE)
# loop
for(i in c(1, 2, 5:8)) {     # Head of for-loop
assign(paste0("iris", i),  # Read and store data frames
read.csv2(paste0(mydir,
temp[i]), sep = ";", dec = ",")
)
}
iris2
#
iris2 %>%
slice(1:15)
# loop
for(i in c(1, 2, 5:8)) {     # Head of for-loop
assign(paste0("iris", i),  # Read and store data frames
read.csv2(paste0(mydir,
temp[i]), sep = ";")
)
}
#
iris2 %>%
slice(1:15)
# loop
for(i in c(1, 2, 5:8)) {     # Head of for-loop
assign(paste0("iris", i),  # Read and store data frames
read_csv(paste0(mydir,
temp[i]), sep = ";")
)
}
# loop
for(i in c(1, 2, 5:8)) {     # Head of for-loop
assign(paste0("iris", i),  # Read and store data frames
read.csv(paste0(mydir,
temp[i]), sep = ";")
)
}
#
iris2 %>%
slice(1:15)
# loop
for(i in c(1, 2, 5:8)) {     # Head of for-loop
assign(paste0("iris", i),  # Read and store data frames
read.csv(paste0(mydir,
temp[i]), sep = ";", dec = ".")
)
}
#
iris2 %>%
slice(1:15)
library(tidyverse)
library(rgbif)
?rgbif
# checar funcoes do pacote
?occ_data
# baixar ocorrencias
dori_gbif <- occ_data(scientificName = "Paracanthurus hepatus",
hasCoordinate = TRUE,
hasGeospatialIssue = FALSE)
dim(dori_gbif$data)
dori_gbif
# checar campos
dori_gbif$data %>% names
# checar issues
gbif_issues()
dori_gbif$data$issues
# checar problemas reportados
issues_gbif <- dori_gbif$data$issues %>%
unique() %>%
strsplit(., "[,]") %>%
unlist()
issues_gbif
# checar problemas reportados
issues_gbif <- dori_gbif$data$issues %>%
# unique() %>%
strsplit(., "[,]") %>%
unlist() %>%
unique()
issues_gbif
gbif_issues()
# ver quais os problemas encontrados no dataset baixado
gbif_issues() %>% head
# ver quais os problemas encontrados no dataset baixado
gbif_issues() %>%
data.frame() %>%
filter(code %in% issues_gbif)
# selecionar campos de interesse
dori_gbif1 <- dori_gbif$data %>%
dplyr::select(scientificName, acceptedScientificName, decimalLatitude, decimalLongitude,
issues, waterBody, basisOfRecord, occurrenceStatus, rightsHolder,
datasetName, recordedBy, depth, locality, habitat)
# ocorrencias únicas
dori_gbif1 <- dori_gbif1 %>%
distinct()
# checar niveis dos fatores
lapply(dori_gbif1, unique)
# investigar niveis suspeitos
dori_gbif1 %>%
distinct(waterBody) %>%
pull()
# ver quais os problemas encontrados no dataset baixado
gbif_issues() %>%
data.frame() %>%
filter(code %in% issues_gbif)
# waterBody
dori_gbif1 %>%
group_by(waterBody) %>%
summarise(occ = length(scientificName)) %>%
ggplot(aes(occ, y=waterBody)) +
geom_bar(stat = 'identity')
# investigar niveis suspeitos
dori_gbif1 %>%
distinct(waterBody) %>%
pull()
# waterBody
dori_gbif1 %>%
group_by(waterBody) %>%
summarise(occ = length(scientificName)) %>%
ggplot(aes(occ, y=waterBody)) +
geom_bar(stat = 'identity')
# fonte das regioes erradas
dori_gbif1 %>%
filter(waterBody %in% c("Atlantic Ocean", "Carribean", "Royal Caribbean", "Carribean Sea", "Bonaire")) %>%
distinct(datasetName)
# 25 ocorrencias
dori_gbif1 %>%
filter(datasetName %in% c("Diveboard - Scuba diving citizen science"))
# filtrar todas do dataset suspeito
dori_gbif_ok <- dori_gbif1 %>%
filter(!datasetName %in% c("Diveboard - Scuba diving citizen science"))
library(ggmap)
library(maps)
library(mapdata)
world <- map_data('world')
# checar pontos
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = dori_gbif_ok, aes(x = decimalLongitude, y = decimalLatitude), color = "red") +
labs(x = "longitude", y = "latitude", title = expression(italic("Paracanthurus hepatus")))
# checar pontos
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = dori_gbif1, aes(x = decimalLongitude, y = decimalLatitude), color = "red") +
labs(x = "longitude", y = "latitude", title = expression(italic("Paracanthurus hepatus")))
# checar profundidade
dori_gbif_ok %>%
ggplot(aes(x = depth, fill = waterBody)) +
geom_histogram()
#####################################################
### extrair dados do OBIS
library(robis)
# baixar ocorrências
dori_obis <- robis::occurrence("Paracanthurus hepatus")
dori_obis1 <- dori_obis %>%
dplyr::select(scientificName, decimalLatitude, decimalLongitude, bathymetry,
flags, waterBody, basisOfRecord, occurrenceStatus, rightsHolder,
datasetName, recordedBy, depth, locality, habitat) %>%
distinct()
# check problemas reportados (flags)
dori_obis1 %>%
distinct(flags)
# check NA em datasetName
dori_obis1 %>%
filter(!flags %in% c("no_depth,on_land", "on_land", "on_land,depth_exceeds_bath", "depth_exceeds_bath,on_land"),
is.na(datasetName)) %>%
distinct(waterBody)
# depth ok
dori_obis1 %>%
filter(!flags %in% c("no_depth,on_land", "on_land", "on_land,depth_exceeds_bath", "depth_exceeds_bath,on_land"),
!is.na(datasetName),
!waterBody %in% c("North America", "North America Atlantic", "atlantique")) %>%
ggplot(aes(x = depth, fill = waterBody)) +
geom_histogram()
# checar niveis
dori_obis1 %>%
filter(!flags %in% c("no_depth,on_land", "on_land", "on_land,depth_exceeds_bath", "depth_exceeds_bath,on_land"),
!is.na(datasetName),
!waterBody %in% c("North America", "North America Atlantic", "atlantique")) %>%
lapply(., unique)
#
dori_obis_ok <- dori_obis1 %>%
filter(!flags %in% c("no_depth,on_land", "on_land", "on_land,depth_exceeds_bath", "depth_exceeds_bath,on_land"),
!is.na(datasetName),
!waterBody %in% c("North America", "North America Atlantic", "atlantique", NA))
# plotar mapa
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = dori_obis_ok, aes(x = decimalLongitude, y = decimalLatitude, color = waterBody)) +
#theme(legend.title = element_blank()) +
labs(x = "longitude", y = "latitude", title = expression(italic("Paracanthurus hepatus")))
source('functions/aux_functions.R')
View(flag_outlier)
# classificar ocorrências
marcados <- dori_gbif$data %>%
data.frame() %>%
dplyr::select(scientificName, decimalLongitude, decimalLatitude, datasetName) %>%
distinct() %>%
flag_outlier(., "Paracanthurus hepatus (Linnaeus, 1766)")
head(marcados)
# mapa
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = marcados,
aes(x = decimalLongitude, y = decimalLatitude,
color = flag)) +
theme(legend.title = element_blank()) +
labs(x = "longitude", y = "latitude",
title = expression(italic("Paracanthurus hepatus")))
library(scrubr)
# mapa
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = data_scrubr,
aes(x = decimalLongitude, y = decimalLatitude),
color = "red") +
geom_point(data = marcados %>%
filter(flag != "OK"),
aes(x = decimalLongitude, y = decimalLatitude),
color = "blue", shape = 3) +
theme(legend.title = element_blank()) +
labs(x = "longitude", y = "latitude",
title = expression(italic("Paracanthurus hepatus")))
# usando os dados com flag
data_scrubr <- marcados %>%
dframe() %>%
coord_impossible() %>%
coord_incomplete() %>%
coord_unlikely() %>%
dedup()
# mapa
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = data_scrubr,
aes(x = decimalLongitude, y = decimalLatitude),
color = "red") +
geom_point(data = marcados %>%
filter(flag != "OK"),
aes(x = decimalLongitude, y = decimalLatitude),
color = "blue", shape = 3) +
theme(legend.title = element_blank()) +
labs(x = "longitude", y = "latitude",
title = expression(italic("Paracanthurus hepatus")))
library(obistools)
dori_obis %>%
dplyr::select(decimalLongitude, decimalLatitude, scientificNameID) %>%
distinct() %>%
check_outliers_species(., report=TRUE)
library(CoordinateCleaner)
flags <-
clean_coordinates(
x = marcados,
lon = "decimalLongitude",
lat = "decimalLatitude",
species = "scientificName",
tests = c("equal", "gbif",
"zeros", "seas")
)
rm(list = setdiff(ls(), c("dori_obis_ok", "dori_gbif_ok")))
# ver diferencas
setdiff(names(dori_gbif_ok), names(dori_obis_ok))
setdiff(names(dori_obis_ok), names(dori_gbif_ok))
all_data <- bind_rows(dori_gbif_ok %>%
mutate(repo = paste0("gbif", row.names(.))),
dori_obis_ok %>%
mutate(repo = paste0("obis", row.names(.)))) %>%
column_to_rownames("repo") %>%
dplyr::select(decimalLongitude, decimalLatitude, depth) %>%
distinct() %>%
rownames_to_column("occ") %>%
separate(col = "occ", into = c("datasetName", "rn"), sep = 4) %>%
mutate(scientificName = "Paracanthurus hepatus") %>%
dplyr::select(-rn)
# mapear ocorrencias
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = all_data, aes(x = decimalLongitude, y = decimalLatitude, color = datasetName)) +
#theme(legend.title = element_blank()) +
labs(x = "longitude", y = "latitude", title = expression(italic("Paracanthurus hepatus")))
world <- map_data('world')
# mapear ocorrencias
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = all_data, aes(x = decimalLongitude, y = decimalLatitude, color = datasetName)) +
#theme(legend.title = element_blank()) +
labs(x = "longitude", y = "latitude", title = expression(italic("Paracanthurus hepatus")))
mydir <- "output/atividade1/"
mydir
list.files(pattern = "*.csv", path = mydir)
temp <- list.files(pattern = "*.csv", path = mydir)
temp
read_csv(paste0(mydir, temp[1])) # 3 e 4 nao leem
read_csv(paste0(mydir, temp[2])) # 3 e 4 nao leem
read_csv(paste0(mydir, temp[3])) # 3 e 4 nao leem
read_csv(paste0(mydir, temp[4])) # 3 e 4 nao leem
read_csv(paste0(mydir, temp[5])) # 3 e 4 nao leem
# loop
for(i in c(1, 2, 5:8)) {     # Head of for-loop
assign(paste0("iris", i),  # Read and store data frames
read.csv(paste0(mydir,
temp[i]), sep = ";", dec = ".")
)
}
View(iris1)
View(iris2)
iris2
#
iris2 %>%
slice(1:15)
#
iris2a <- iris2 %>%
slice(1:15)
names(iris2a)
iris2a %>%
rename(SPECIE = spp)
iris2a %>%
rename(spp = SPECIE)
iris2a %>%
rename(spp = SPECIE,
id1 = ID_1)
iris3 <- read.table("~/github/ciencia_colab/output/atividade1/atividade1_GABRIEL-DEPIANTTI.csv", sep=";", quote="\"")
View(iris3)
# Sorteio de 3 = (1) apresentar, 2 e 3 (debater)
c("Vanessa", "Pedro", "Gabriel", "Nilson") %>%
sample(3)
install.packages('klippy')
remotes::install_github("rlesur/klippy")
iris <- read.csv("data/iris_mod.csv", header = T)
lapply(iris, unique)
klippy::klippy(position = c('top', 'right'))
klippy::klippy(position = c('top', 'right'))
library(tidyverse)
#####################################################
### extrair dados do GBIF
library(rgbif)
# checar funcoes do pacote
?occ_data
# baixar ocorrencias
dori_gbif <- occ_data(scientificName = "Paracanthurus hepatus",
hasCoordinate = TRUE,
hasGeospatialIssue = FALSE)
# dimensoes
dim(dori_gbif)
dim(dori_gbif$data)
# checar campos
dori_gbif$data %>% names
## Problemas reportados
# checar issues
gbif_issues()
# checar problemas reportados
issues_gbif <- dori_gbif$data$issues %>%
# unique() %>%
strsplit(., "[,]") %>%
unlist() %>%
unique()
# ver quais os problemas encontrados no dataset baixado
gbif_issues() %>%
data.frame() %>%
filter(code %in% issues_gbif)
# Ultimos 3 = (1) apresentar, 2 e 3 (debater)
c("Marina", "Vanessa") %>%
sample(2)
world <- map_data('Brazil')
world <- map_data('world')
?map_data
?lims
# checar pontos
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = dori_gbif1, aes(x = decimalLongitude, y = decimalLatitude), color = "red") +
labs(x = "longitude", y = "latitude", title = expression(italic("Paracanthurus hepatus"))) +
ylim(0, -24)
#
world <- map_data('brazil')
library(ggmap)
library(maps)
library(mapdata)
world <- map_data('world')
world <- map_data('brazil')
world <- map_data('world', region = 'brazil')
# checar pontos
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic() +
geom_point(data = dori_gbif1, aes(x = decimalLongitude, y = decimalLatitude), color = "red") +
labs(x = "longitude", y = "latitude", title = expression(italic("Paracanthurus hepatus"))) +
ylim(0, -24)
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group))
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed()
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +
theme_classic()
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() +   ylim(0, -24)
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() + ylim(0, -24) + xlim(-40,-20)
# checar pontos
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() + ylim(-24, 0) + xlim(-40,-20)
# checar pontos
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() + ylim(-24, 0) + xlim(-50,-20)
ggplot() +
geom_polygon(data = world, aes(x = long, y = lat, group = group)) +
coord_fixed() + ylim(-24, 0) + xlim(-50,-20) +
theme_classic()
?check_outliers_species
??check_outliers_species
# Ultimos 3 = (1) apresentar, (2) debater
c("Gustavo", "Pedro", "Carlos", "Nilson") %>%
sample(2)
install.packages("flexdashboard")
iris %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
theme_classic()
iris %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
theme_classic()
iris %>%
pivot_longer(cols = Sepal.Length:Petal.Width, names_to = "variable", values_to = "size") %>%
ggplot(aes(x = variable, y = size, color = Species)) +
geom_boxplot() +
theme_classic()
c("Vanessa", "Gustavo", "Pedro", "Isabella", "Carlos", "Gabriel", "Nilson") %>%
sample(2)
require(tidyverse)
c("Vanessa", "Gustavo", "Pedro", "Isabella", "Carlos", "Gabriel", "Nilson") %>%
sample(2)
install.packages('rmarkdown')
??rgbif
library(rgbif)
occ_search(pred_within("POLYGON((-14 42, 9 38, -7 26, -14 42))"))
teste <- occ_search(pred_within("POLYGON((-14 42, 9 38, -7 26, -14 42))"))
teste <- occ_search(pred_within("POLYGON((-14 20, 9 38, -7 26, -14 42))"))
teste <- occ_search(pred_within("POLYGON((-14 20, 9 10, -10 26, -14 42))"))
teste <- occ_search(pred_within("POLYGON((-24 -42, -23 -42, -23 -43, -24 -43))"))
?pred_within
install.packages('rgbif')
install.packages("rgbif")
library(rgbif)
teste <- occ_search(pred_within("POLYGON((-24 -42, -23 -42, -23 -43, -24 -43))"))
wkts2 = "MULTIPOLYGON (((11.3431 47.2451, 11.4638 47.2451, 11.4638 47.2919, 11.3431 47.2919, 11.3431 47.2451)), ((12.9644 47.7608, 13.0922 47.7608, 13.0922 47.8453, 12.9644 47.8453, 12.9644 47.7608)), ((14.2284 48.2217, 14.3669 48.2217, 14.3669 48.3443, 14.2284 48.3443, 14.2284 48.2217)))"
teste <- occ_search(pred_within(wkts2))
teste <- occ_search(pred_within("POLYGON((-14 42, 9 38, -7 26, -14 42))"))
teste <- occ_search(pred_within("POLYGON((-14.1 42.2, 9.4 38.3, -7.4 26.2, -14.1 42.7))"))
teste <- occ_search(pred_within("POLYGON((-14 42, 9 38, -7 26, -14 42))"))
pred_within("POLYGON((-14 42, 9 38, -7 26, -14 42))")
plot("POLYGON((-14 42, 9 38, -7 26, -14 42))")
teste <- occ_search(pred_gte('decimalLatitude", 65))
pred_within("POLYGON((-14 42, 9 38, -7 26, -14 42))")
teste <- occ_search(pred_gte('decimalLatitude', 65))
install.packages('bdc')
install.packages('CoordinateCleaner')
install.packages("CoordinateCleaner")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(robis)
library(bdc)
# checar coordenadas válidas
check_pf <-
bdc::bdc_coordinates_outOfRange(
data = dori_gbif1,
lat = "decimalLatitude",
lon = "decimalLongitude")
install.packages('scrubr')
library(obistools)
if (!require("obistools")) install.packages("obistools")
install.packages("obistools")
install.packages("devtools")
devtools::install_github("iobis/obistools")
install.packages('scrubr')
remotes::install_github("ropensci/scrubr")
